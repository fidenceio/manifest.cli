#!/bin/bash

# Markdown Engine Script
# Provides consistent, well-formatted markdown generation, templates, and validation

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Colors and formatting
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Markdown formatting functions
markdown_header() {
    local level="$1"
    local title="$2"
    local emoji="$3"
    
    # Ensure proper heading level (1-6)
    if [ "$level" -lt 1 ]; then level=1; fi
    if [ "$level" -gt 6 ]; then level=6; fi
    
    local hashes=$(printf "%*s" "$level" | tr ' ' '#')
    echo "${hashes} ${emoji}${title}"
}

markdown_section() {
    local title="$1"
    local emoji="$2"
    echo ""
    echo "## ${emoji}${title}"
    echo ""
}

markdown_subsection() {
    local title="$1"
    local emoji="$2"
    echo ""
    echo "### ${emoji}${title}"
    echo ""
}

markdown_list_item() {
    local text="$1"
    local emoji="$2"
    echo "- ${emoji}${text}"
}

markdown_code_block() {
    local language="$1"
    local code="$2"
    echo ""
    echo "\`\`\`${language}"
    echo "$code"
    echo "\`\`\`"
    echo ""
}

markdown_inline_code() {
    local code="$1"
    echo "\`${code}\`"
}

markdown_bold() {
    local text="$1"
    echo "**${text}**"
}

markdown_italic() {
    local text="$1"
    echo "*${text}*"
}

markdown_link() {
    local text="$1"
    local url="$2"
    echo "[${text}](${url})"
}

markdown_table_header() {
    local headers=("$@")
    local header_line=""
    local separator_line=""
    
    for header in "${headers[@]}"; do
        header_line="${header_line}| ${header} "
        separator_line="${separator_line}|---"
    done
    
    echo "${header_line}|"
    echo "${separator_line}|"
}

markdown_table_row() {
    local values=("$@")
    local row=""
    
    for value in "${values[@]}"; do
        row="${row}| ${value} "
    done
    
    echo "${row}|"
}

# Template for release notes
generate_release_notes_template() {
    local version="$1"
    local timestamp="$2"
    local release_type="$3"
    
    cat << EOF
# Release v${version}

**Release Date:** ${timestamp}  
**Release Type:** ${release_type}

## üéØ What's New

This release includes various improvements and bug fixes.

## üîß Changes

- General improvements and bug fixes
- Enhanced CLI functionality
- Improved error handling

## üöÄ Installation

\`\`\`bash
# Install the CLI
curl -fsSL https://raw.githubusercontent.com/fidenceio/manifest.cli/main/install-cli.sh | bash

# Or clone and install manually
git clone https://github.com/fidenceio/manifest.cli.git
cd manifest.cli
./install-cli.sh
\`\`\`

## üìã Usage

\`\`\`bash
# Complete workflow
manifest go

# Version bump
manifest go patch

# Documentation
manifest docs
\`\`\`

## üìö Documentation

- [User Guide](docs/USER_GUIDE.md)
- [Command Reference](docs/COMMAND_REFERENCE.md)
- [Examples](docs/EXAMPLES.md)

## üîó Links

- [GitHub Repository](https://github.com/fidenceio/fidenceio.manifest.cli)
- [Issues](https://github.com/fidenceio/fidenceio.manifest.cli/issues)
- [Discussions](https://github.com/fidenceio/fidenceio.manifest.cli/discussions)

---
*Generated by Manifest CLI v${version}*
EOF
}

# Template for changelog
generate_changelog_template() {
    local version="$1"
    local timestamp="$2"
    local release_type="$3"
    
    cat << EOF
# Changelog v${version}

**Release Date:** ${timestamp}  
**Release Type:** ${release_type}

## üÜï New Features

- Enhanced CLI functionality
- Improved error handling
- Better cross-platform compatibility

## üîß Improvements

- Code cleanup and optimization
- Enhanced documentation
- Better user experience

## üêõ Bug Fixes

- Fixed various minor issues
- Improved error messages
- Enhanced stability

## üìö Documentation

- Updated user guide
- Enhanced examples
- Improved command reference

## üîÑ Changes

- Updated dependencies
- Improved performance
- Enhanced security

---
*Generated by Manifest CLI v${version}*
EOF
}

# Template for README version update
generate_readme_version_section() {
    local version="$1"
    local timestamp="$2"
    
    cat << EOF
## üìã Version Information

| Property | Value |
|----------|-------|
| **Current Version** | \`${version}\` |
| **Release Date** | \`${timestamp}\` |
| **Git Tag** | \`v${version}\` |
| **Branch** | \`main\` |
| **Last Updated** | \`${timestamp}\` |
| **CLI Version** | \`${version}\` |

### üìö Documentation Files

- **Version Info**: [VERSION](VERSION)
- **CLI Source**: [src/cli/](src/cli/)
- **Install Script**: [install-cli.sh](install-cli.sh)
EOF
}

# Template for command help sections
generate_command_help_template() {
    local command="$1"
    local description="$2"
    local emoji="$3"
    local examples="$4"
    
    cat << EOF
## ${emoji} \`${command}\` - ${description}

${description}

### Usage

\`\`\`bash
${examples}
\`\`\`

### Options

- Use \`manifest ${command} --help\` for detailed options
- All commands support \`--verbose\` for detailed output

### Examples

\`\`\`bash
# Basic usage
manifest ${command}

# With options
manifest ${command} --option value
\`\`\`
EOF
}

# Template for configuration sections
generate_config_section_template() {
    local title="$1"
    local description="$2"
    local variables="$3"
    
    cat << EOF
## ${title}

${description}

| Variable | Description | Default |
|----------|-------------|---------|
EOF
    
    # Add variables
    while IFS='|' read -r var desc default; do
        echo "| \`${var}\` | ${desc} | \`${default}\` |"
    done <<< "$variables"
    
    echo ""
    echo "### Example Configuration"
    echo ""
    echo "\`\`\`bash"
    echo "# Add to your .env file"
    while IFS='|' read -r var desc default; do
        echo "${var}=\"${default}\""
    done <<< "$variables"
    echo "\`\`\`"
}

# Template for troubleshooting sections
generate_troubleshooting_template() {
    local issue="$1"
    local symptoms="$2"
    local solutions="$3"
    
    cat << EOF
### ${issue}

**Symptoms:**
${symptoms}

**Solutions:**
${solutions}

**Prevention:**
- Regular maintenance
- Proper configuration
- Following best practices
EOF
}

# Template for workflow examples
generate_workflow_template() {
    local title="$1"
    local description="$2"
    local steps="$3"
    local commands="$4"
    
    cat << EOF
## ${title}

${description}

### Steps

${steps}

### Commands

\`\`\`bash
${commands}
\`\`\`

### What Happens

- Version bump
- Documentation generation
- Git operations
- Remote synchronization
EOF
}

# Markdown validation helper
validate_markdown_syntax() {
    local content="$1"
    local errors=0
    
    # Check for proper heading hierarchy
    local prev_level=0
    while IFS= read -r line; do
        if [[ $line =~ ^(#+)[[:space:]] ]]; then
            local current_level=${#BASH_REMATCH[1]}
            if [ $current_level -gt $((prev_level + 1)) ]; then
                log_error "Heading level skipped: $line"
                errors=$((errors + 1))
            fi
            prev_level=$current_level
        fi
    done <<< "$content"
    
    # Check for multiple consecutive blank lines
    if echo "$content" | awk '/^$/{if(prev_empty){print "found"; exit} prev_empty=1; next} {prev_empty=0} END{exit 0}' | grep -q "found"; then
        log_error "Multiple consecutive blank lines found"
        errors=$((errors + 1))
    fi
    
    # Check for trailing whitespace
    if echo "$content" | grep -q "[[:space:]]$"; then
        log_error "Trailing whitespace found"
        errors=$((errors + 1))
    fi
    
    return $errors
}

# Clean markdown content
clean_markdown() {
    local content="$1"
    
    # Remove trailing whitespace
    content=$(echo "$content" | sed 's/[[:space:]]*$//')
    
    # Remove multiple consecutive blank lines
    content=$(echo "$content" | awk 'BEGIN{blank=0} /^[[:space:]]*$/{blank++; if(blank<=1) print; next} {blank=0; print}')
    
    # Ensure file ends with newline
    if [ -n "$content" ] && [ "${content: -1}" != $'\n' ]; then
        content="${content}"$'\n'
    fi
    
    echo "$content"
}

# Generate markdown file with validation
generate_markdown_file() {
    local file_path="$1"
    local content="$2"
    local validate="${3:-true}"
    
    log_info "Generating markdown file: $file_path"
    
    # Clean the content
    content=$(clean_markdown "$content")
    
    # Validate syntax if requested
    if [[ "$validate" == "true" ]]; then
        if ! validate_markdown_syntax "$content"; then
            log_warning "Markdown syntax issues found in $file_path"
        fi
    fi
    
    # Write the file
    echo "$content" > "$file_path"
    
    if [[ -f "$file_path" ]]; then
        log_success "Generated: $file_path"
        return 0
    else
        log_error "Failed to generate: $file_path"
        return 1
    fi
}

# Main function for command-line usage
main() {
    case "${1:-help}" in
        "template")
            case "${2:-}" in
                "release")
                    generate_release_notes_template "${3:-}" "${4:-}" "${5:-}"
                    ;;
                "changelog")
                    generate_changelog_template "${3:-}" "${4:-}" "${5:-}"
                    ;;
                "readme")
                    generate_readme_version_section "${3:-}" "${4:-}"
                    ;;
                "help")
                    generate_command_help_template "${3:-}" "${4:-}" "${5:-}" "${6:-}"
                    ;;
                "config")
                    generate_config_section_template "${3:-}" "${4:-}" "${5:-}"
                    ;;
                "troubleshooting")
                    generate_troubleshooting_template "${3:-}" "${4:-}" "${5:-}"
                    ;;
                "workflow")
                    generate_workflow_template "${3:-}" "${4:-}" "${5:-}" "${6:-}"
                    ;;
                *)
                    log_error "Unknown template type: ${2:-}"
                    echo "Available templates: release, changelog, readme, help, config, troubleshooting, workflow"
                    return 1
                    ;;
            esac
            ;;
        "validate")
            local file="${2:-}"
            if [[ -n "$file" && -f "$file" ]]; then
                local content=$(cat "$file")
                if validate_markdown_syntax "$content"; then
                    log_success "Markdown syntax is valid: $file"
                    return 0
                else
                    log_error "Markdown syntax issues found: $file"
                    return 1
                fi
            else
                log_error "File not found: $file"
                return 1
            fi
            ;;
        "clean")
            local file="${2:-}"
            if [[ -n "$file" && -f "$file" ]]; then
                local content=$(cat "$file")
                local cleaned=$(clean_markdown "$content")
                echo "$cleaned" > "$file"
                log_success "Cleaned markdown file: $file"
            else
                log_error "File not found: $file"
                return 1
            fi
            ;;
        "help"|"-h"|"--help")
            echo "Markdown Engine Script"
            echo "====================="
            echo ""
            echo "Usage: $0 [command] [options]"
            echo ""
            echo "Commands:"
            echo "  template [type] [args...]  - Generate markdown templates"
            echo "  validate [file]            - Validate markdown syntax"
            echo "  clean [file]               - Clean markdown file"
            echo "  help                       - Show this help"
            echo ""
            echo "Template Types:"
            echo "  release [version] [timestamp] [type]"
            echo "  changelog [version] [timestamp] [type]"
            echo "  readme [version] [timestamp]"
            echo "  help [command] [description] [emoji] [examples]"
            echo "  config [title] [description] [variables]"
            echo "  troubleshooting [issue] [symptoms] [solutions]"
            echo "  workflow [title] [description] [steps] [commands]"
            echo ""
            echo "Examples:"
            echo "  $0 template release 15.27.0 '2025-09-05 13:41:28 UTC' minor"
            echo "  $0 validate README.md"
            echo "  $0 clean docs/USER_GUIDE.md"
            ;;
        *)
            log_error "Unknown command: $1"
            echo "Use '$0 help' for usage information"
            return 1
            ;;
    esac
}

# If script is being executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi

