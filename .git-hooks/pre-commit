#!/bin/bash

# Manifest CLI Pre-Commit Hook
# Prevents committing sensitive data by leveraging the Manifest CLI security module
# This hook runs automatically before each commit

set -e  # Exit on error

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Find the project root (where .git directory is)
PROJECT_ROOT="$(git rev-parse --show-toplevel)"

# Security check configuration
MANIFEST_CLI_SECURITY_PRIVATE_ENV_FILES=(".env" ".env.local" ".env.manifest.local" ".env.development" ".env.test" ".env.production" ".env.staging")

echo -e "${BLUE}üîí Running Manifest CLI Pre-Commit Security Checks...${NC}"
echo ""

# Track issues
CRITICAL_ISSUES=0
WARNINGS=0

# =============================================================================
# CHECK 1: Verify no private environment files are being committed
# =============================================================================
echo -e "${BLUE}[1/5] Checking for private environment files...${NC}"

for env_file in "${MANIFEST_CLI_SECURITY_PRIVATE_ENV_FILES[@]}"; do
    # Check if file is in the staging area
    if git diff --cached --name-only | grep -q "^${env_file}$"; then
        echo -e "${RED}   ‚ùå CRITICAL: Attempting to commit private file: ${env_file}${NC}"
        echo -e "${YELLOW}      Action: This file contains sensitive data and should NOT be committed.${NC}"
        CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
    fi
done

if [ $CRITICAL_ISSUES -eq 0 ]; then
    echo -e "${GREEN}   ‚úÖ No private environment files in staging area${NC}"
fi

# =============================================================================
# CHECK 2: Scan staged files for sensitive data patterns
# =============================================================================
echo -e "${BLUE}[2/5] Scanning staged files for sensitive data patterns...${NC}"

# Get list of staged files (excluding deleted files)
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -n "$STAGED_FILES" ]; then
    # Sensitive data patterns to check
    SENSITIVE_PATTERNS=(
        'password[[:space:]]*=[[:space:]]*['\''"][^'\''"]{8,}['\''"]'
        'secret[[:space:]]*=[[:space:]]*['\''"][^'\''"]{8,}['\''"]'
        'api_key[[:space:]]*=[[:space:]]*['\''"][^'\''"]{20,}['\''"]'
        'private_key[[:space:]]*=[[:space:]]*['\''"][^'\''"]{20,}['\''"]'
        'access_token[[:space:]]*=[[:space:]]*['\''"][^'\''"]{20,}['\''"]'
        'aws_access_key_id[[:space:]]*=[[:space:]]*AKIA[0-9A-Z]{16}'
        'github_token[[:space:]]*=[[:space:]]*gh[ps]_[a-zA-Z0-9]{36,}'
        'AKIA[0-9A-Z]{16}'  # AWS Access Key
        'gh[ps]_[a-zA-Z0-9]{36,}'  # GitHub token
        'sk-[a-zA-Z0-9]{48}'  # OpenAI API key
        'eyJ[a-zA-Z0-9_-]*\.[a-zA-Z0-9_-]*\.[a-zA-Z0-9_-]*'  # JWT token (loose)
    )

    FOUND_SENSITIVE=0

    for pattern in "${SENSITIVE_PATTERNS[@]}"; do
        while IFS= read -r file; do
            if [ -f "$PROJECT_ROOT/$file" ]; then
                # Check staged content (not working directory)
                if git diff --cached "$file" | grep -E "$pattern" | grep -v "^-" | grep "^\+" > /dev/null 2>&1; then
                    if [ $FOUND_SENSITIVE -eq 0 ]; then
                        echo -e "${RED}   ‚ùå CRITICAL: Potential sensitive data found in staged files:${NC}"
                    fi
                    echo -e "${YELLOW}      File: $file${NC}"
                    echo -e "${YELLOW}      Pattern: $pattern${NC}"
                    FOUND_SENSITIVE=$((FOUND_SENSITIVE + 1))
                    CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
                fi
            fi
        done <<< "$STAGED_FILES"
    done

    if [ $FOUND_SENSITIVE -eq 0 ]; then
        echo -e "${GREEN}   ‚úÖ No sensitive data patterns detected in staged files${NC}"
    fi
else
    echo -e "${GREEN}   ‚úÖ No files to scan${NC}"
fi

# =============================================================================
# CHECK 3: Verify .gitignore includes all necessary patterns
# =============================================================================
echo -e "${BLUE}[3/5] Verifying .gitignore configuration...${NC}"

GITIGNORE_ISSUES=0

# Check if .gitignore exists
if [ ! -f "$PROJECT_ROOT/.gitignore" ]; then
    echo -e "${RED}   ‚ùå WARNING: .gitignore file not found${NC}"
    WARNINGS=$((WARNINGS + 1))
    GITIGNORE_ISSUES=$((GITIGNORE_ISSUES + 1))
else
    # Check if essential patterns are in .gitignore
    REQUIRED_PATTERNS=(".env" ".env.local" ".env.*.local" "manifest.config")

    for pattern in "${REQUIRED_PATTERNS[@]}"; do
        if ! grep -q "^${pattern}$" "$PROJECT_ROOT/.gitignore" 2>/dev/null; then
            if [ $GITIGNORE_ISSUES -eq 0 ]; then
                echo -e "${YELLOW}   ‚ö†Ô∏è  WARNING: Missing patterns in .gitignore:${NC}"
            fi
            echo -e "${YELLOW}      - $pattern${NC}"
            GITIGNORE_ISSUES=$((GITIGNORE_ISSUES + 1))
            WARNINGS=$((WARNINGS + 1))
        fi
    done

    if [ $GITIGNORE_ISSUES -eq 0 ]; then
        echo -e "${GREEN}   ‚úÖ .gitignore properly configured${NC}"
    fi
fi

# =============================================================================
# CHECK 4: Check for accidentally staged large files
# =============================================================================
echo -e "${BLUE}[4/5] Checking for large files...${NC}"

MAX_FILE_SIZE=10485760  # 10MB in bytes
LARGE_FILES=0

if [ -n "$STAGED_FILES" ]; then
    while IFS= read -r file; do
        if [ -f "$PROJECT_ROOT/$file" ]; then
            FILE_SIZE=$(stat -f%z "$PROJECT_ROOT/$file" 2>/dev/null || stat -c%s "$PROJECT_ROOT/$file" 2>/dev/null || echo 0)
            if [ "$FILE_SIZE" -gt "$MAX_FILE_SIZE" ]; then
                if [ $LARGE_FILES -eq 0 ]; then
                    echo -e "${YELLOW}   ‚ö†Ô∏è  WARNING: Large files detected (>10MB):${NC}"
                fi
                FILE_SIZE_MB=$((FILE_SIZE / 1048576))
                echo -e "${YELLOW}      - $file (${FILE_SIZE_MB}MB)${NC}"
                LARGE_FILES=$((LARGE_FILES + 1))
                WARNINGS=$((WARNINGS + 1))
            fi
        fi
    done <<< "$STAGED_FILES"

    if [ $LARGE_FILES -eq 0 ]; then
        echo -e "${GREEN}   ‚úÖ No large files detected${NC}"
    fi
else
    echo -e "${GREEN}   ‚úÖ No files to check${NC}"
fi

# =============================================================================
# CHECK 5: Run Manifest CLI security audit if available
# =============================================================================
echo -e "${BLUE}[5/5] Running Manifest CLI security module (if available)...${NC}"

# Check if manifest-cli is available
if command -v manifest >/dev/null 2>&1; then
    # Run the security audit in quiet mode
    # Set environment variable to skip report generation (prevents timestamp changes)
    export MANIFEST_CLI_SKIP_SECURITY_REPORT=true
    if manifest security > /dev/null 2>&1; then
        echo -e "${GREEN}   ‚úÖ Manifest CLI security audit passed${NC}"
    else
        echo -e "${YELLOW}   ‚ö†Ô∏è  WARNING: Manifest CLI security audit found issues${NC}"
        echo -e "${YELLOW}      Run 'manifest security' for details${NC}"
        WARNINGS=$((WARNINGS + 1))
    fi
    unset MANIFEST_CLI_SKIP_SECURITY_REPORT
else
    echo -e "${YELLOW}   ‚ö†Ô∏è  INFO: Manifest CLI not installed, skipping advanced security audit${NC}"
    echo -e "${YELLOW}      Install with: ./install-cli.sh${NC}"
fi

# =============================================================================
# SUMMARY AND DECISION
# =============================================================================
echo ""
echo -e "${BLUE}================================================================${NC}"

if [ $CRITICAL_ISSUES -gt 0 ]; then
    echo -e "${RED}‚ùå COMMIT BLOCKED: $CRITICAL_ISSUES critical issue(s) found!${NC}"
    echo ""
    echo -e "${YELLOW}üö® ACTION REQUIRED:${NC}"
    echo -e "${YELLOW}   1. Remove sensitive data from staged files${NC}"
    echo -e "${YELLOW}   2. Add sensitive files to .gitignore${NC}"
    echo -e "${YELLOW}   3. Use 'git reset HEAD <file>' to unstage files${NC}"
    echo -e "${YELLOW}   4. Review the output above for specific issues${NC}"
    echo ""
    echo -e "${YELLOW}üí° TIP: Use environment variables or config files for sensitive data${NC}"
    echo -e "${YELLOW}   Example: source .env.local (which is already gitignored)${NC}"
    echo ""
    exit 1
elif [ $WARNINGS -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  COMMIT WARNING: $WARNINGS warning(s) found${NC}"
    echo -e "${YELLOW}   Review the warnings above and proceed with caution${NC}"
    echo -e "${GREEN}‚úÖ Proceeding with commit...${NC}"
    echo ""
    exit 0
else
    echo -e "${GREEN}‚úÖ All security checks passed!${NC}"
    echo -e "${GREEN}   Your commit is safe to proceed.${NC}"
    echo ""
    exit 0
fi
