# =============================================================================
# üöÄ Manifest CLI Global Environment Configuration
# =============================================================================
# Copy this file to .env.manifest.global and customize for your needs:
#   cp env.manifest.global.example .env.manifest.global
#
# üìã CONFIGURATION PRECEDENCE (last wins):
#   1. .env.manifest.global (global configuration - commit to git)
#   2. .env.manifest.local (project-specific overrides - DO NOT commit to git)
#
# üí° QUICK START: 
#   ‚Ä¢ Global setup: Uncomment variables in "Essential" section below
#   ‚Ä¢ Project overrides: Copy env.manifest.local.example to .env.manifest.local in your project
#   ‚Ä¢ Test setup: Run 'manifest test' to verify your configuration
# =============================================================================

# =============================================================================
# üéØ ESSENTIAL CONFIGURATION (Start Here)
# =============================================================================
# Uncomment and customize these for immediate use:

# MANIFEST_CLI_DEFAULT_BRANCH="main"                    # Your default Git branch
# MANIFEST_CLI_VERSION_FORMAT="XX.XX.XX"               # Version format (1.0.0)
# MANIFEST_CLI_GIT_TAG_PREFIX="v"                      # Git tag prefix (v1.0.0)
# MANIFEST_CLI_DOCS_ARCHIVE_FOLDER="docs/zArchive"    # Archive folder

# =============================================================================
# üìÅ FILE AND DIRECTORY NAMES
# =============================================================================
# Customize file and directory names (advanced users only)

# MANIFEST_CLI_README_FILE="README.md"                 # README filename
# MANIFEST_CLI_VERSION_FILE="VERSION"                  # Version filename
# MANIFEST_CLI_GITIGNORE_FILE=".gitignore"             # Gitignore filename
# MANIFEST_CLI_DOCUMENTATION_ARCHIVE_DIR="zArchive"    # Documentation archive directory name
# MANIFEST_CLI_GIT_DIR=".git"                          # Git directory name
# MANIFEST_CLI_MODULES_DIR="modules"                   # Modules directory name

# =============================================================================
# üìÑ FILE EXTENSIONS
# =============================================================================
# Customize file extensions (advanced users only)

# MANIFEST_CLI_MARKDOWN_EXT="*.md"                     # Markdown file extension

# =============================================================================
# üè† INSTALLATION PATHS
# =============================================================================
# Customize installation paths (advanced users only)

# MANIFEST_CLI_INSTALL_DIR="/usr/local/share/manifest-cli"  # Install location
# MANIFEST_CLI_BIN_DIR="~/.local/bin"                       # Binary location

# =============================================================================
# üóÇÔ∏è TEMPORARY FILE PATHS
# =============================================================================
# Customize temporary file paths (advanced users only)

# MANIFEST_CLI_TEMP_DIR="~/.manifest-cli"              # Temp files directory
# MANIFEST_CLI_TEMP_LIST="temp-files.list"             # Temp files list filename

# =============================================================================
# ‚öôÔ∏è CONFIGURATION FILE NAMES
# =============================================================================
# Customize configuration file names (advanced users only)

# MANIFEST_CLI_CONFIG_GLOBAL=".env.manifest.global"    # Global config filename
# MANIFEST_CLI_CONFIG_LOCAL=".env.manifest.local"      # Local config filename

# =============================================================================
# üéÆ INTERACTIVE MODE
# =============================================================================
# Control safety prompts during version bumps
# false = Non-interactive (default, good for CI/CD)
# true  = Interactive prompts (use -i flag instead)
MANIFEST_INTERACTIVE_MODE=false

# =============================================================================
# üìä VERSIONING SYSTEM
# =============================================================================

# Version format pattern for your organization
# Examples:
#   "XX.XX.XX"     ‚Üí 1.0.0 (standard semantic versioning)
#   "XXXX.XXXX.XXXX" ‚Üí 0001.0001.0001 (enterprise with zero-padding)
#   "X.X.X.X"      ‚Üí 1.0.0.1 (with build number)
#   "YYYY.MM.DD"   ‚Üí 2024.01.15 (date-based versioning)
MANIFEST_VERSION_FORMAT=XX.XX.XX

# Version separator character
MANIFEST_VERSION_SEPARATOR=.

# Version component names (for documentation)
MANIFEST_VERSION_COMPONENTS=major,minor,patch

# Maximum version component values (0 = unlimited)
# Format: "major_max,minor_max,patch_max"
MANIFEST_VERSION_MAX_VALUES=0,0,0

# =============================================================================
# üß† HUMAN-INTUITIVE VERSIONING LOGIC
# =============================================================================
# LEFT components = More MAJOR changes (bigger impact)
# RIGHT components = More MINOR changes (smaller impact)

# Which component represents each type of change:
MANIFEST_MAJOR_COMPONENT_POSITION=1
MANIFEST_MINOR_COMPONENT_POSITION=2
MANIFEST_PATCH_COMPONENT_POSITION=3
MANIFEST_REVISION_COMPONENT_POSITION=4

# =============================================================================
# üìà VERSION INCREMENT BEHAVIOR
# =============================================================================
# When you run "manifest go major" - which component increments?
MANIFEST_MAJOR_INCREMENT_TARGET=1

# When you run "manifest go minor" - which component increments?
MANIFEST_MINOR_INCREMENT_TARGET=2

# When you run "manifest go patch" - which component increments?
MANIFEST_PATCH_INCREMENT_TARGET=3

# When you run "manifest go revision" - which component increments?
MANIFEST_REVISION_INCREMENT_TARGET=4

# =============================================================================
# üîÑ VERSION RESET BEHAVIOR
# =============================================================================
# When incrementing MAJOR, reset these components to 0
MANIFEST_MAJOR_RESET_COMPONENTS=2,3,4

# When incrementing MINOR, reset these components to 0
MANIFEST_MINOR_RESET_COMPONENTS=3,4

# When incrementing PATCH, reset these components to 0
MANIFEST_PATCH_RESET_COMPONENTS=4

# When incrementing REVISION, reset these components to 0
MANIFEST_REVISION_RESET_COMPONENTS=

# =============================================================================
# üè∑Ô∏è  GIT CONFIGURATION
# =============================================================================

# Git tag prefix and suffix
MANIFEST_GIT_TAG_PREFIX=v
MANIFEST_GIT_TAG_SUFFIX=

# Git operation settings
MANIFEST_GIT_PUSH_STRATEGY=simple
MANIFEST_GIT_PULL_STRATEGY=rebase
MANIFEST_GIT_TIMEOUT=300
MANIFEST_GIT_RETRIES=3

# Custom commit message template
# Available placeholders: {version}, {timestamp}, {type}, {branch}
MANIFEST_GIT_COMMIT_TEMPLATE=Release v{version} - {timestamp}

# =============================================================================
# üåø BRANCH NAMING CONVENTION
# =============================================================================

MANIFEST_DEFAULT_BRANCH=main
MANIFEST_FEATURE_BRANCH_PREFIX=feature/
MANIFEST_HOTFIX_BRANCH_PREFIX=hotfix/
MANIFEST_RELEASE_BRANCH_PREFIX=release/
MANIFEST_BUGFIX_BRANCH_PREFIX=bugfix/
MANIFEST_DEVELOPMENT_BRANCH=develop
MANIFEST_STAGING_BRANCH=staging

# =============================================================================
# üìö DOCUMENTATION CONFIGURATION
# =============================================================================

# Documentation folder paths (relative to project root)
MANIFEST_DOCS_FOLDER=docs
MANIFEST_DOCS_ARCHIVE_FOLDER=docs/zArchive

# Documentation settings
MANIFEST_DOCS_AUTO_GENERATE=true
MANIFEST_DOCS_HISTORICAL_LIMIT=20

# Documentation file naming pattern
# Available placeholders: VERSION
# Examples:
#   "RELEASE_vVERSION.md" ‚Üí RELEASE_v1.0.0.md
#   "RELEASE_VERSION.md"  ‚Üí RELEASE_1.0.0.md
MANIFEST_DOCS_FILENAME_PATTERN=RELEASE_vVERSION.md

# Custom template directory (leave empty for built-in templates)
MANIFEST_DOCS_TEMPLATE_DIR=

# =============================================================================
# üïê TRUSTED TIMESTAMPS (NTP)
# =============================================================================

# NTP servers for trusted timestamps
MANIFEST_NTP_SERVER1=time.apple.com
MANIFEST_NTP_SERVER2=time.google.com
MANIFEST_NTP_SERVER3=pool.ntp.org
MANIFEST_NTP_SERVER4=time.nist.gov

# NTP operation settings
MANIFEST_NTP_TIMEOUT=5
MANIFEST_NTP_RETRIES=3
MANIFEST_NTP_VERIFY=true

# =============================================================================
# üîÑ AUTO-UPDATE CONFIGURATION
# =============================================================================

MANIFEST_AUTO_UPDATE=true
MANIFEST_UPDATE_COOLDOWN=30

# =============================================================================
# üç∫ HOMEBREW INTEGRATION (macOS)
# =============================================================================

MANIFEST_BREW_OPTION=enabled
MANIFEST_BREW_INTERACTIVE=no
MANIFEST_TAP_REPO=https://github.com/fidenceio/fidenceio-homebrew-tap.git

# =============================================================================
# üêõ DEVELOPMENT & DEBUGGING
# =============================================================================

MANIFEST_DEBUG=false
MANIFEST_VERBOSE=false
MANIFEST_LOG_LEVEL=INFO
MANIFEST_INTERACTIVE=true

# =============================================================================
# üè¢ PROJECT-SPECIFIC CONFIGURATION
# =============================================================================
# Add project-specific variables here
# These will be loaded when running manifest commands in this project

# Examples:
# MANIFEST_PROJECT_NAME="My Awesome Project"
# MANIFEST_PROJECT_DESCRIPTION="A revolutionary tool for developers"
# MANIFEST_TEAM_NAME="Development Team"
# MANIFEST_ORGANIZATION="Acme Corp"

# =============================================================================
# ‚öôÔ∏è  ADVANCED CONFIGURATION
# =============================================================================

# Custom version parsing regex (leave empty for default)
MANIFEST_VERSION_REGEX=

# Custom version validation rules (leave empty for default)
MANIFEST_VERSION_VALIDATION=

# =============================================================================
# üìù CONFIGURATION EXAMPLES
# =============================================================================
# 
# üéØ SCENARIO 1: Standard Open Source Project
# MANIFEST_DEFAULT_BRANCH="main"
# MANIFEST_VERSION_FORMAT="XX.XX.XX"
# MANIFEST_GIT_TAG_PREFIX="v"
#
# üéØ SCENARIO 2: Enterprise Project with Zero-Padding
# MANIFEST_VERSION_FORMAT="XXXX.XXXX.XXXX"
# MANIFEST_VERSION_MAX_VALUES="9999,9999,9999"
#
# üéØ SCENARIO 3: Date-Based Versioning
# MANIFEST_VERSION_FORMAT="YYYY.MM.DD"
# MANIFEST_MAJOR_COMPONENT_POSITION="1"  # Year
# MANIFEST_MINOR_COMPONENT_POSITION="2"  # Month
# MANIFEST_PATCH_COMPONENT_POSITION="3"  # Day
#
# üéØ SCENARIO 4: Project-Specific Documentation
# Copy env.manifest.local.example to .env.manifest.local in your project:
# cp env.manifest.local.example .env.manifest.local
# Then uncomment and customize:
# MANIFEST_DOCS_ARCHIVE_FOLDER="project-docs/archive"
#
# =============================================================================
# üîß TROUBLESHOOTING
# =============================================================================
#
# ‚ùå Problem: Configuration not loading
# ‚úÖ Solution: Check file permissions and syntax
#
# ‚ùå Problem: Project-specific settings not working
# ‚úÖ Solution: Ensure .env.local is in project root, not gitignored
#
# ‚ùå Problem: Version format not working
# ‚úÖ Solution: Test with 'manifest test versions'
#
# ‚ùå Problem: Documentation not generating
# ‚úÖ Solution: Check MANIFEST_DOCS_AUTO_GENERATE=true
#
# =============================================================================
# üìö FURTHER READING
# =============================================================================
# ‚Ä¢ User Guide: Run 'manifest --help' for command reference
# ‚Ä¢ Examples: Check docs/EXAMPLES.md for usage patterns
# ‚Ä¢ GitHub: https://github.com/fidenceio/fidenceio.manifest.cli
# =============================================================================
