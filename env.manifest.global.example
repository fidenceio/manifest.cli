# =============================================================================
# üöÄ Manifest CLI Global Environment Configuration
# =============================================================================
# Copy this file to .env.manifest.global and customize for your needs:
#   cp env.manifest.global.example .env.manifest.global
#
# üìã CONFIGURATION PRECEDENCE (last wins):
#   1. .env.manifest.global (global configuration - commit to git)
#   2. .env.manifest.local (project-specific overrides - DO NOT commit to git)
#
# üí° QUICK START: 
#   ‚Ä¢ Global setup: Uncomment variables in "Essential" section below
#   ‚Ä¢ Project overrides: Copy env.manifest.local.example to .env.manifest.local in your project
#   ‚Ä¢ Test setup: Run 'manifest test' to verify your configuration
# =============================================================================

# =============================================================================
# üéØ ESSENTIAL CONFIGURATION (Start Here)
# =============================================================================
# Uncomment and customize these for immediate use:

# MANIFEST_DEFAULT_BRANCH="main"                    # Your default Git branch
# MANIFEST_VERSION_FORMAT="XX.XX.XX"               # Version format (1.0.0)
# MANIFEST_GIT_TAG_PREFIX="v"                      # Git tag prefix (v1.0.0)
# MANIFEST_DOCS_FOLDER="docs"                      # Documentation folder
# MANIFEST_DOCS_ARCHIVE_FOLDER="docs/zArchive"    # Archive folder

# =============================================================================
# üéÆ INTERACTIVE MODE
# =============================================================================
# Control safety prompts during version bumps
# false = Non-interactive (default, good for CI/CD)
# true  = Interactive prompts (use -i flag instead)
MANIFEST_INTERACTIVE_MODE=false

# =============================================================================
# üìä VERSIONING SYSTEM
# =============================================================================

# Version format pattern for your organization
# Examples:
#   "XX.XX.XX"     ‚Üí 1.0.0 (standard semantic versioning)
#   "XXXX.XXXX.XXXX" ‚Üí 0001.0001.0001 (enterprise with zero-padding)
#   "X.X.X.X"      ‚Üí 1.0.0.1 (with build number)
#   "YYYY.MM.DD"   ‚Üí 2024.01.15 (date-based versioning)
MANIFEST_VERSION_FORMAT="XX.XX.XX"

# Version separator character
MANIFEST_VERSION_SEPARATOR="."

# Version component names (for documentation)
MANIFEST_VERSION_COMPONENTS="major,minor,patch"

# Maximum version component values (0 = unlimited)
# Format: "major_max,minor_max,patch_max"
MANIFEST_VERSION_MAX_VALUES="0,0,0"

# =============================================================================
# üß† HUMAN-INTUITIVE VERSIONING LOGIC
# =============================================================================
# LEFT components = More MAJOR changes (bigger impact)
# RIGHT components = More MINOR changes (smaller impact)

# Which component represents each type of change:
MANIFEST_MAJOR_COMPONENT_POSITION="1"     # Leftmost = biggest impact
MANIFEST_MINOR_COMPONENT_POSITION="2"     # Middle = moderate impact  
MANIFEST_PATCH_COMPONENT_POSITION="3"     # Rightmost = least impact
MANIFEST_REVISION_COMPONENT_POSITION="4"  # Most right = most specific

# =============================================================================
# üìà VERSION INCREMENT BEHAVIOR
# =============================================================================
# When you run "manifest go major" - which component increments?
MANIFEST_MAJOR_INCREMENT_TARGET="1"          # First component

# When you run "manifest go minor" - which component increments?
MANIFEST_MINOR_INCREMENT_TARGET="2"          # Second component

# When you run "manifest go patch" - which component increments?
MANIFEST_PATCH_INCREMENT_TARGET="3"          # Third component

# When you run "manifest go revision" - which component increments?
MANIFEST_REVISION_INCREMENT_TARGET="4"       # Fourth component (if exists)

# =============================================================================
# üîÑ VERSION RESET BEHAVIOR
# =============================================================================
# When incrementing MAJOR, reset these components to 0
MANIFEST_MAJOR_RESET_COMPONENTS="2,3,4"     # Reset minor, patch, revision

# When incrementing MINOR, reset these components to 0
MANIFEST_MINOR_RESET_COMPONENTS="3,4"       # Reset patch, revision

# When incrementing PATCH, reset these components to 0
MANIFEST_PATCH_RESET_COMPONENTS="4"         # Reset revision only

# When incrementing REVISION, reset these components to 0
MANIFEST_REVISION_RESET_COMPONENTS=""       # Reset nothing (additive)

# =============================================================================
# üè∑Ô∏è  GIT CONFIGURATION
# =============================================================================

# Git tag prefix and suffix
MANIFEST_GIT_TAG_PREFIX="v"                 # Results in tags like v1.0.0
MANIFEST_GIT_TAG_SUFFIX=""                  # No suffix

# Git operation settings
MANIFEST_GIT_PUSH_STRATEGY="simple"         # Push strategy: simple/upstream/current
MANIFEST_GIT_PULL_STRATEGY="rebase"         # Pull strategy: rebase/merge/ff-only
MANIFEST_GIT_TIMEOUT="300"                  # Operation timeout (seconds)
MANIFEST_GIT_RETRIES="3"                    # Retry attempts

# Custom commit message template
# Available placeholders: {version}, {timestamp}, {type}, {branch}
MANIFEST_GIT_COMMIT_TEMPLATE="Release v{version} - {timestamp}"

# =============================================================================
# üåø BRANCH NAMING CONVENTION
# =============================================================================

MANIFEST_DEFAULT_BRANCH="main"              # Your default branch
MANIFEST_FEATURE_BRANCH_PREFIX="feature/"   # Feature branches
MANIFEST_HOTFIX_BRANCH_PREFIX="hotfix/"     # Hotfix branches
MANIFEST_RELEASE_BRANCH_PREFIX="release/"   # Release branches
MANIFEST_BUGFIX_BRANCH_PREFIX="bugfix/"     # Bugfix branches
MANIFEST_DEVELOPMENT_BRANCH="develop"       # Development branch
MANIFEST_STAGING_BRANCH="staging"           # Staging branch

# =============================================================================
# üìö DOCUMENTATION CONFIGURATION
# =============================================================================

# Documentation folder paths (relative to project root)
MANIFEST_DOCS_FOLDER="docs"                 # Main documentation folder
MANIFEST_DOCS_ARCHIVE_FOLDER="docs/zArchive" # Archive for old versions

# Documentation settings
MANIFEST_DOCS_AUTO_GENERATE=true            # Auto-generate docs during version updates
MANIFEST_DOCS_HISTORICAL_LIMIT=20           # Max versions to keep in archive

# Documentation file naming pattern
# Available placeholders: VERSION
# Examples:
#   "RELEASE_vVERSION.md" ‚Üí RELEASE_v1.0.0.md
#   "RELEASE_VERSION.md"  ‚Üí RELEASE_1.0.0.md
MANIFEST_DOCS_FILENAME_PATTERN="RELEASE_vVERSION.md"

# Custom template directory (leave empty for built-in templates)
MANIFEST_DOCS_TEMPLATE_DIR=""

# =============================================================================
# üïê TRUSTED TIMESTAMPS (NTP)
# =============================================================================

# NTP servers for trusted timestamps
MANIFEST_NTP_SERVERS="time.apple.com,time.google.com,pool.ntp.org,time.nist.gov"

# NTP operation settings
MANIFEST_NTP_TIMEOUT=5                      # Query timeout (seconds)
MANIFEST_NTP_RETRIES=3                      # Retry attempts
MANIFEST_NTP_VERIFY=true                    # Verify server responses

# =============================================================================
# üîÑ AUTO-UPDATE CONFIGURATION
# =============================================================================

MANIFEST_AUTO_UPDATE=true                   # Enable update checking
MANIFEST_UPDATE_COOLDOWN="30"               # Cooldown between checks (minutes)

# =============================================================================
# üç∫ HOMEBREW INTEGRATION (macOS)
# =============================================================================

MANIFEST_BREW_OPTION=enabled                # Enable Homebrew functionality
MANIFEST_BREW_INTERACTIVE=no                # Interactive Homebrew updates
MANIFEST_TAP_REPO="https://github.com/fidenceio/fidenceio-homebrew-tap.git"

# =============================================================================
# üêõ DEVELOPMENT & DEBUGGING
# =============================================================================

MANIFEST_DEBUG=false                        # Enable debug mode
MANIFEST_VERBOSE=false                      # Enable verbose output
MANIFEST_LOG_LEVEL="INFO"                   # Log level: DEBUG/INFO/WARN/ERROR
MANIFEST_INTERACTIVE=true                   # Enable interactive mode

# =============================================================================
# üè¢ PROJECT-SPECIFIC CONFIGURATION
# =============================================================================
# Add project-specific variables here
# These will be loaded when running manifest commands in this project

# Examples:
# MANIFEST_PROJECT_NAME="My Awesome Project"
# MANIFEST_PROJECT_DESCRIPTION="A revolutionary tool for developers"
# MANIFEST_TEAM_NAME="Development Team"
# MANIFEST_ORGANIZATION="Acme Corp"

# =============================================================================
# ‚öôÔ∏è  ADVANCED CONFIGURATION
# =============================================================================

# Custom version parsing regex (leave empty for default)
MANIFEST_VERSION_REGEX=""

# Custom version validation rules (leave empty for default)
MANIFEST_VERSION_VALIDATION=""

# =============================================================================
# üìù CONFIGURATION EXAMPLES
# =============================================================================
# 
# üéØ SCENARIO 1: Standard Open Source Project
# MANIFEST_DEFAULT_BRANCH="main"
# MANIFEST_VERSION_FORMAT="XX.XX.XX"
# MANIFEST_GIT_TAG_PREFIX="v"
# MANIFEST_DOCS_FOLDER="docs"
#
# üéØ SCENARIO 2: Enterprise Project with Zero-Padding
# MANIFEST_VERSION_FORMAT="XXXX.XXXX.XXXX"
# MANIFEST_VERSION_MAX_VALUES="9999,9999,9999"
#
# üéØ SCENARIO 3: Date-Based Versioning
# MANIFEST_VERSION_FORMAT="YYYY.MM.DD"
# MANIFEST_MAJOR_COMPONENT_POSITION="1"  # Year
# MANIFEST_MINOR_COMPONENT_POSITION="2"  # Month
# MANIFEST_PATCH_COMPONENT_POSITION="3"  # Day
#
# üéØ SCENARIO 4: Project-Specific Documentation
# Copy env.manifest.local.example to .env.manifest.local in your project:
# cp env.manifest.local.example .env.manifest.local
# Then uncomment and customize:
# MANIFEST_DOCS_FOLDER="project-docs"
# MANIFEST_DOCS_ARCHIVE_FOLDER="project-docs/archive"
#
# =============================================================================
# üîß TROUBLESHOOTING
# =============================================================================
#
# ‚ùå Problem: Configuration not loading
# ‚úÖ Solution: Check file permissions and syntax
#
# ‚ùå Problem: Project-specific settings not working
# ‚úÖ Solution: Ensure .env.local is in project root, not gitignored
#
# ‚ùå Problem: Version format not working
# ‚úÖ Solution: Test with 'manifest test versions'
#
# ‚ùå Problem: Documentation not generating
# ‚úÖ Solution: Check MANIFEST_DOCS_AUTO_GENERATE=true
#
# =============================================================================
# üìö FURTHER READING
# =============================================================================
# ‚Ä¢ User Guide: Run 'manifest help' for command reference
# ‚Ä¢ Examples: Check docs/EXAMPLES.md for usage patterns
# ‚Ä¢ GitHub: https://github.com/fidenceio/fidenceio.manifest.cli
# =============================================================================
