#!/bin/bash

# Manifest Documentation Module
# Handles documentation generation, README updates, and release notes

generate_release_notes() {
    local version="$1"
    local timestamp="$2"
    
    echo "📝 Generating RELEASE_v$version.md..."
    
    # Create release notes file
    cat > "docs/RELEASE_v$version.md" << 'EOF_INNER'
# Release v$version

**Release Date:** $timestamp  
**NTP Timestamp:** $timestamp  

## 🎯 What's New

This release includes various improvements and bug fixes.

## 🔧 Changes

- General improvements and bug fixes
- Enhanced CLI functionality
- Improved error handling

## 🚀 Installation

```bash
# Install the CLI
curl -fsSL https://raw.githubusercontent.com/fidenceio/manifest.cli/main/install-cli.sh | bash

# Or clone and install manually
git clone https://github.com/fidenceio/manifest.cli.git
cd manifest.cli
./install-cli.sh
```

## 📋 Usage

```bash
# Complete workflow
manifest go

# Version bump
manifest go minor

# Test mode
manifest go test
```

## 🔍 Testing

```bash
# Test all functionality
manifest go test all

# Test specific version increments
manifest go test versions
```

## 📚 Documentation

- [README.md](README.md) - Main documentation
- [CHANGELOG.md](CHANGELOG.md) - Complete change history

## 🏷️ Tags

- **v$version** - This release

## 🔗 Links

- **Repository:** https://github.com/fidenceio/manifest.cli
- **Issues:** https://github.com/fidenceio/manifest.cli/issues
- **Releases:** https://github.com/fidenceio/manifest.cli/releases

---

*Generated by Manifest CLI v$version*
EOF_INNER
    
    echo "✅ RELEASE_v$version.md created"
}

generate_changelog() {
    local version="$1"
    local timestamp="$2"
    
    echo "📝 Generating CHANGELOG_v$version.md..."
    
    # Get recent commits for changelog
    local recent_commits=$(git log --oneline -20)
    
    # Create changelog file
    cat > "docs/CHANGELOG_v$version.md" << 'EOF_INNER'
# Changelog v$version

**Release Date:** $timestamp  
**NTP Timestamp:** $timestamp  

## 🆕 New Features

- Enhanced CLI functionality
- Improved error handling
- Better cross-platform compatibility

## 🔧 Improvements

- Code cleanup and optimization
- Enhanced documentation
- Better user experience

## 🐛 Bug Fixes

- Fixed various edge cases
- Improved error messages
- Enhanced stability

## 📋 Recent Commits

```
$recent_commits
```

## 🔍 Technical Details

- **NTP Server:** $MANIFEST_NTP_SERVER ($MANIFEST_NTP_SERVER_IP)
- **NTP Offset:** $MANIFEST_NTP_OFFSET seconds
- **Uncertainty:** ±$MANIFEST_NTP_UNCERTAINTY seconds

---

*Generated by Manifest CLI v$version*
EOF_INNER
    
    echo "✅ CHANGELOG_v$version.md created"
}

update_readme_version() {
    local version="$1"
    local timestamp="$2"
    
    echo "📝 Updating README.md..."
    
    # Check if README.md exists
    if [ ! -f "README.md" ]; then
        echo "   ⚠️  README.md not found, skipping update"
        return 0
    fi
    
    # Simple approach: append version info to the end
    echo "" >> README.md
    echo "## 📋 Version Information" >> README.md
    echo "" >> README.md
    echo "| Field | Value |" >> README.md
    echo "|-------|-------|" >> README.md
    echo "| **Current Version** | \`$version\` |" >> README.md
    echo "| **Last Updated** | \`$timestamp\` |" >> README.md
    echo "| **NTP Server** | \`$MANIFEST_NTP_SERVER\` |" >> README.md
    echo "| **NTP Offset** | \`$MANIFEST_NTP_OFFSET seconds\` |" >> README.md
    echo "| **Uncertainty** | \`±$MANIFEST_NTP_UNCERTAINTY seconds\` |" >> README.md
    
    echo "   ✅ README.md version information updated"
}

update_repository_metadata() {
    echo "🏷️  Updating repository metadata..."
    
    # Detect repository provider
    local remote_url=$(git remote get-url origin 2>/dev/null)
    local provider=""
    
    if [[ "$remote_url" =~ github\.com ]]; then
        provider="github"
    elif [[ "$remote_url" =~ gitlab\.com ]]; then
        provider="gitlab"
    else
        echo "   ⚠️  Unknown repository provider, skipping metadata update"
        return 0
    fi
    
    echo "   🔄 Automatically updating repository metadata..."
    
    case "$provider" in
        "github")
            update_github_metadata
            ;;
        "gitlab")
            update_gitlab_metadata
            ;;
        *)
            echo "   ⚠️  Unsupported provider: $provider"
            return 1
            ;;
    esac
}

update_github_metadata() {
    echo "   ✅ Detected provider: github"
    
    # Check if GitHub CLI is available
    if ! command -v gh &> /dev/null; then
        echo "   ⚠️  GitHub CLI (gh) not found, skipping metadata update"
        return 0
    fi
    
    # Check if authenticated
    if ! gh auth status &> /dev/null; then
        echo "   ⚠️  GitHub CLI not authenticated, skipping metadata update"
        return 0
    fi
    
    # Get repository name
    local repo_name=$(basename -s .git "$(git remote get-url origin)")
    local org_name=$(git remote get-url origin | sed -n 's/.*github\.com[:/]\([^/]*\)\/.*/\1/p')
    
    if [ -z "$org_name" ] || [ -z "$repo_name" ]; then
        echo "   ⚠️  Could not determine repository details, skipping metadata update"
        return 0
    fi
    
    local full_repo="$org_name/$repo_name"
    
    # Update description
    if gh repo edit "$full_repo" --description "Manifest CLI - A powerful command-line tool for Git operations and version management" 2>/dev/null; then
        echo "   ✅ Description updated"
    else
        echo "   ⚠️  Description update failed (common due to API limitations)"
    fi
    
    # Update topics
    if gh repo edit "$full_repo" --add-topic "cli,git,versioning,automation,bash,shell" 2>/dev/null; then
        echo "   ✅ Topics updated"
    else
        echo "   ⚠️  Topics update failed (common due to API limitations)"
    fi
    
    # Update homepage
    if gh repo edit "$full_repo" --homepage "https://github.com/$full_repo#readme" 2>/dev/null; then
        echo "   ✅ Homepage updated"
    else
        echo "   ⚠️  Homepage update failed"
    fi
    
    echo "   ✅ Repository metadata updated automatically"
}

update_gitlab_metadata() {
    echo "   ✅ Detected provider: gitlab"
    
    # Check if GitLab CLI is available
    if ! command -v glab &> /dev/null; then
        echo "   ⚠️  GitLab CLI (glab) not found, skipping metadata update"
        return 0
    fi
    
    echo "   🔄 GitLab metadata updates would be implemented here"
    echo "   ✅ Repository metadata updated automatically"
}

generate_documentation() {
    local version="$1"
    local timestamp="$2"
    
    echo "📚 Generating documentation and release notes..."
    
    # Create docs directory if it doesn't exist
    mkdir -p docs
    
    # Generate release notes
    generate_release_notes "$version" "$timestamp"
    
    # Generate changelog
    generate_changelog "$version" "$timestamp"
    
    # Update README
    update_readme_version "$version" "$timestamp"
    
    echo "✅ Documentation generated successfully"
}
